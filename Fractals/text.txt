Understanding recursion visually with fractals

    Recursion is one of the little difficult type of concept that computer students have to face. Simply making a fibonacci sequence doesn't really guarantee complete understanding. Usually one has to get some experience before getting a good feel of the concept. But there's an easier way. If you could see what happens under the hood you could get a better understanding more quickly. Fractals are perfect for this purpose besides being beautiful to look at. 
    Fractal is basically a reccuring pattern. If you zoom into an ideal fractal, you couldn't tell how much we have zoomed in. One famous example of the mendelbrot set is shown below.
    
    """IMAGE[ MANDELBROT SET ]"""
    
    I chose to do it in C to make it a little challenging but you could use any other language you like. If you don't understand or like the code just don't bother and stick to the bigger details only.
    
    SETTING UP
    Fractals can be drawn with ease if we have some turtle like object to draw objects. For this purpose I made a file implementing a basic turtle with configurable angle and side variables. All the code used in this post is available here """INSERT LINK""".
    
    
    DRAWING THE FRACTALS 
    ====================
    
KOCH CURVE 
This is the world's first fractal invented by """NAME""" In """year""". It is the easy both to make and understand:
    1. Split the line into three parts
    2. Convert middle part into triangle withot base
    3. Repeat the same procedure for all the new individual lines
    
1 Iteration:
    """IMAGE"""
    
2 Iterations:
    """IMAGE"""

3 Iterations:
    """IMAGE"""

4 Iterations:
    """IMAGE"""

5 Iterations:
    """IMAGE"""
    
You can also combine three such lines to produce the koch snowflake:
    """IMAGE"""
            
In different colors:
    """IMAGE"""
    
SIERPINSKI ARROWHEAD
Another kind of fractal that we can make is the Sierpinski arrowhead named after """NAME""". To make it we follow the following rule:
    1. Think of the line as the base of (equilateral) triangle with other sides removed
    2. Don't draw the line. Instead travel halfway to the middle of of left side of the imaginary triangle
    3. Move parallel to the base till we reach the other side
    4. Move down the side until we reach the base's end
    5. Repeat the same procedure for the new straight lines but:
        i.  Make tringles inwards for the slanting lines
        ii. Move outwards for the straight line
        
1 Iteration:
    """IMAGE"""
    
2 Iterations:
    """IMAGE"""

3 Iterations:
    """IMAGE"""

4 Iterations:
    """IMAGE"""

5 Iterations:
    """IMAGE"""
    
6 Iterations:
    """IMAGE"""
            
In different colors:
    """IMAGE"""
    
The animation from Wikipedia could be found here """LINK""".

OTHER RANDOM EXAMPLES:
Just playing around with the simple programs I came up with some interesting fractals. Each one is shown with the basic rule shown first along with the final result. All of them are made by making a single version of the fractal line on each edge of a cube.

EXAMPLE 1

EXAMPLE 2

EXAMPLE 3

And this is just the tip of the iceberg. There are a lot more uses of recursion other than just making fractals. The same holds for fractals. You can find fractals everywhere in nature. Even in your body!( as blood vessels ). You can find more about them on the internet if you like( there are also tutorials teaching how to make the mandelbrot set mentioned above ).

    I got the idea to make this post from exercise """NUMBER""" in the book Think Python which is freely available here"""LINK""". I took the name pica from the book 'Squak: programming with robots' """LINK""" as an abreviation for Picasso.
